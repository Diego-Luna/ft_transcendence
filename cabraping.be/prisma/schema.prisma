// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id   String  @id @default(cuid())
  ftId String? @unique

  email          String  @unique
  username       String  @unique
  nickname       String
  firstName      String?
  lastName       String?
  avatarImageURL String?
  status         String? // online (finished), offline, playing, searching (looking)

  channelsAsOwner  Channel[] @relation("channel_owner") // 1-to-many
  channelsAsMember Channel[] @relation("channel_member") // many-to-many
  channelsAsAdmin  Channel[] @relation("channel_admin") // many-to-many

  games          Game[] @relation("game_user")
  gamesAsInviter Game[] @relation("game_inviter")
  gamesAsInvitee Game[] @relation("game_invitee")
  gamesAsWinner  Game[] @relation("game_winner")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  channelId String?
}

model Channel {
  id String @id @default(cuid())

  owner   User   @relation("channel_owner", fields: [ownerId], references: [id])
  ownerId String

  status String // Public or Private
  hash   String? // hash

  admins  User[] @relation("channel_admin")
  members User[] @relation("channel_member")

  // public or private

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Game {
  id String @id @default(cuid())

  players  User[] @relation("game_user")
  winner   User   @relation("game_winner", fields: [winnerId], references: [id])
  winnerId String

  inviter          User   @relation("game_inviter", fields: [inviterId], references: [id])
  inviterId        String
  invitee          User   @relation("game_invitee", fields: [inviteeId], references: [id])
  inviteeId        String
  invitationStatus String // pending, accepted, rejected

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
