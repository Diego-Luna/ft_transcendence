// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id   String  @id @default(cuid())
  ftId String? @unique

  email          String  @unique
  username       String  @unique
  firstName      String?
  lastName       String?
  avatarImageURL String?

  channelsAsOwner  Channel[] // 1-to-many
  channelsAsMember UserChannel[] // many-to-many

  directChatsAsA DirectChat[] @relation("user_a")
  directChatsAsB DirectChat[] @relation("user_b")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id String @id @default(cuid())

  owner   User?   @relation(fields: [ownerId], references: [id])
  ownerId String?

  members UserChannel[]

  messages Message[]

  // public or private

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Explicit Many-to-Many Relationship Table
model UserChannel {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String

  @@id([userId, channelId])
}

// Explicit Many-to-Many Relationship Table
model DirectChat {
  id String @id @default(cuid())

  userA   User   @relation("user_a", fields: [userAId], references: [id])
  userAId String

  userB   User   @relation("user_b", fields: [userBId], references: [id])
  userBId String

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id String @id @default(cuid())

  text String

  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?

  directChat   DirectChat? @relation(fields: [directChatId], references: [id])
  directChatId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
