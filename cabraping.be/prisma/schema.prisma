// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id   String  @id @default(cuid())
  ftId String? @unique

  email          String  @unique
  username       String  @unique
  nickname       String
  firstName      String?
  lastName       String?
  avatarImageURL String?
  status         String? // online (finished), offline, playing, searching (looking)

  channelsAsOwner  Channel[]     @relation("channel_owner")
  channelsAsAdmin  Channel[]     @relation("channel_admin")
  channelsAsMember Channel[]     @relation("channel_member")
  channelsAsBanned Channel[]     @relation("channel_ban")
  channelsAsMuted  ChannelMute[]

  games          Game[] @relation("game_user")
  gamesAsInviter Game[] @relation("game_inviter")
  gamesAsInvitee Game[] @relation("game_invitee")
  gamesAsWinner  Game[] @relation("game_winner")
  gamesAsLoser   Game[] @relation("game_loser")

  friends       User[] @relation("friends")
  befriendsWith User[] @relation("friends")

  blockedUsers   User[] @relation("blocked_users")
  blockedByUsers User[] @relation("blocked_users")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id String @id @default(cuid())

  owner   User   @relation("channel_owner", fields: [ownerId], references: [id])
  ownerId String

  status String // Public or Private
  hash   String? // hash

  admins      User[] @relation("channel_admin")
  members     User[] @relation("channel_member")
  bannedUsers User[] @relation("channel_ban")

  mutedUsers ChannelMute[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChannelMute {
  id String @id @default(cuid())

  duration  Int
  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Game {
  id String @id @default(cuid())

  players User[] @relation("game_user")

  winner   User?   @relation("game_winner", fields: [winnerId], references: [id])
  winnerId String?
  loser    User?   @relation("game_loser", fields: [loserId], references: [id])
  loserId  String?

  invitationStatus String  @default("pending") // pending, accepted, rejected
  inviter          User    @relation("game_inviter", fields: [inviterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inviterId        String
  invitee          User?   @relation("game_invitee", fields: [inviteeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inviteeId        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
